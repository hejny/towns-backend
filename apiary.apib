FORMAT: 1A
HOST: http://api.towns.cz/

# Towns API

Towns offers simple API, which allows the clients to retrieve from or send to the Towns game server

Allowed HTTP requests:

 * `POST` - To create resource
 * `POST` - To update resource. Originally should be `PATCH`
 * `GET` - Get a resource or list of resources
 * `DELETE` - To delete resource

Description Of Usual Server Responses:

 * 200 `OK` - the request was successful (some API calls may return 201 instead).
 * 201 `Created` - the request was successful and a resource was created.
 * 204 `No Content` - the request was successful but there is no representation to return (i.e. the response is empty).
 * 400 `Bad Request` - the request could not be understood or was missing required parameters.
 * 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
 * 403 `Forbidden` - access denied.
 * 404 `Not Found` - resource was not found.
 * 405 `Method Not Allowed` - requested method is not supported for resource.
 * 422 `Unprocessable Entity` - requested data contain invalid values.
 * 429 `Too Many Requests` - exceeded Mailtrap API limits. Pause requests, wait up to one minute, and try again.


# Group Objects

## objects [/objects{?x,y,radius,not,type,subtype,keys}]

### GET

Retrieve the objects on/around x,y coordinates of map. All of parameeters are optional, each of them has default value
The example URL is not displayed correctly by APIARY and should look like this:
/objects?x=45&y=12&radius=10&not[]=5666b8259297ffe7c16c4696&not[]=5666b8259297ffe7c16c4697&not=5666b8259297ffe7c16c4698&type[]=building&subtype[]=main&keys[]=x&keys[]=y&keys[]=design&keys[]=owner

+ Request (application/json)

    + Headers

            x-auth: {access_token}

+ Parameters

   + x: `45.12` (optional, number) - The x coordinate. Default 0.
   + y: `12.001` (optional, number) - The y coordinate. Default 0.
   + radius: `10` (optional, integer) - The radius is set on server side, to prevent getting to much info in one request.(min = 1, max = 200, default = 10)
   + not: `5666b8259297ffe7c16c4696`, `5666b8259297ffe7c16c4697`, `5666b8259297ffe7c16c4698` (optional, array) - List of object IDs, not to return. Default is returning all objects in area.
   + type: `building` (optional, array) - List of types of objects to return. Default is all object types.
   + subtype: `main` (optional, array) - list of subtypes of objects to return
   + keys: `x`, `y`, `design`, `owner` (optional, array) - List of properties to return. Defaultly all public properties are sent.


+ Response 200 (application/json)

    + Headers

            Location: /objects

    + Attributes
        - objects (array[fullObject])

### POST

You may create new object using this action. It takes a JSON object.
To create a new object, the client have to send:
- the x and y coordinates where the new object will be built,
- the id of prototype

Everything else of new object will be calculated based on user and prototype.

+ Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "prototypeId": "asd123454hg4536yhsd4",
                "x": "12.435",
                "y": "43.123"
            }



+ Response 201 (application/json)

    + Headers

            Location: /objects

    + Body

            {
                "status": "ok",
                "objectId": "asd123454hg4536yhsd4"
            }


## /objects/{object_id}

### GET

Get the details of the object by its Id. There will be optional query parameter for html version. Something like ?format=html which will return html version. Default format of response will be json.

 + Parameters
    + object_id: `5666b8259297ffe7c16c1212` - The unique ID of the object.

 + Request (application/json)

    + Headers

            Location: /objects/5666b8259297ffe7c16c6456

 + Response 200 (application/json)
    + Attributes
        + status: ok
        + object (fullObject)


### POST

This method should update the object. Users can't update the object directly, instead they can call various actions on objects. Those actions will perform changes on the objects.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Attributes
        - object (createObject)



 + Response 201 (application/json)

    + Headers

            Location: /objects/5666b8259297ffe7c16c6456

    + Body

            {
                "status": "ok",
                "objectId": "5666b8259297ffe7c16c6456"
            }



### DELETE

This method deletes object. User can't delete objects directly, instead they can call actions such as dismantle or attack.

+ Request (application/json)

    + Headers

            x-auth: {access_token}

+ Response 200 (application/json)

    + Headers

            Location: /objects/5666b8259297ffe7c16c6785

    + Body

                {
                    "status": "ok",
                    "objectId": "5666b8259297ffe7c16c6456",
                    "version": "2"
                }




## /objects/{object_id}/{action}

### POST

Do action with Objects. There are many actions

|action|description|parameters|
|:--:|:--:|:--:|
|create|||
|attack|||
|move|||
|repair|||
|dismantle|it will remove the building|x,y|
|move|||
|defense||
|life||
|repair||

 + Parameters
    + object_id (number) - ID of object
    + action (string) - attack, use or dimantle

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)





## /objects/history/{current_id}

### GET

Get History of Object from ObjectHistory. It will return collection of the searched object versions. Each of them have unique version number and same current_id which equals to _id of object from Objects collection.

 + Parameters
    + current_id (number) - ID of object

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

        [{
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "current_id": ObjectId("5666b8259297ffe7c16c1212"),
                "version": "2",
                "name" : "Veza",
                "type" : "building",
                "subtype": "",
                "x": "12.30",
                "y": "-45.55",
                "start_time": "1449572800",
                "stop_time": "1449587000",
                "locale": "cs",
                "design": {
                    type: "model",
                    data: "12,3453,654,234,...",
                },
                "content": {
                    type: "markdown",
                    data: "Veza je obranna budova"
                },
                "properties": {
                    strength: "1",
                    defense: "10",
                    speed: "1"
                },
                "actions": ["defense", "dismantle"],
                "owner" : {
                    "$ref" : "Users",
                    "$id" : ObjectId("5126bc054aed4daf9e2ab772")
                }
            },
            {
                "_id" : ObjectId("5666b8259297ffe7c16c25435"),
                "current_id": ObjectId("5666b8259297ffe7c16c1212"),
                "version": "1",
                "name" : "Veza",
                "type" : "building",
                "subtype": "",
                "x": "12.10",
                "y": "-55.55",
                "start_time": "1449572794",
                "stop_time": "1449572800",
                "locale": "cs",
                "design": {
                    type: "model",
                    data: "12,3453,654,234,...",
                },
                "content": {
                    type: "markdown",
                    data: "Veza je obranna budova"
                },
                "properties": {
                    strength: "1",
                    defense: "10",
                    speed: "1"
                },
                "actions": ["defense", "dismantle"],
                "owner" : {
                    "$ref" : "Users",
                    "$id" : ObjectId("5126bc054aed4daf9e2ab772")
                }
        }]




## /objects/prototypes

### GET

Get all object prototypes, which are available to user. There is no filtering at the moment and clients will get full list of active prototypes.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /objects/prototypes

    + Body

            [{
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "name" : "Veza",
                "type" : "building",
                "subtype": "",
                "locale": "cs",
                "design": {
                    type: "model",
                    data: "12,3453,654,234,...",
                },
                "content": {
                    type: "markdown",
                    data: "Veza je obranna budova"
                },
                "properties": {
                    strength: "1",
                    defense: "10",
                    speed: "1"
                },
                "actions": ["defense", "move", "dismantle"]
            },{
                "_id" : ObjectId("5666b8259297ffe7c16c6456"),
                "name" : "Brana",
                "type" : "building",
                "subtype": "",
                "locale": "cs",
                "design": {
                    type: "model",
                    data: "54,32,11,...",
                },
                "content": {
                    type: "markdown",
                    data: "Brana je cast ochrannej steny"
                },
                "properties": {
                    strength: "3",
                    defense: "7",
                    speed: "1"
                },
                "actions": ["attack","defense", "dismantle"]
            }]

### POST

Create new object prototype. The prototype will be saved and offered to all clients as a prototype.
Don't send array, but one prototype (Only one prototype can be entered at once.)
The API will return object id on success, otherwise will return reason with correct error HTTP code.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "name" : "Brana",
                "type" : "building",
                "subtype": "",
                "locale": "cs",
                "design": {
                    "type": "model",
                    "data": "54,32,11,..."
                },
                "content": {
                    "type": "markdown",
                    "data": "Brana je cast ochrannej steny"
                },
                "properties": {
                    "strength": 3,
                    "defense": 7,
                    "speed": 1
                },
                "actions": ["attack","defense", "dismantle"]
            }



 + Response 201 (application/json)

    + Headers

            Location: /objects

    + Body

            {
                "status": "ok",
                "prototypeId": "5666b8259297ffe7c16c6456"
            }








## /objects/prototypes/{object_id}

### GET

Get requested object prototype

 + Parameters
    + object_id (number) - ID of object

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /objects/prototypes/5666b8259297ffe7c16c6785

    + Body

            {
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version": "1",
                "name" : "Veza",
                "type" : "building",
                "subtype": "",
                "design": {
                    type: "model",
                    data: "12,3453,654,234,...",
                },
                "content": {
                    type: "markdown",
                    data: "Veza je obranna budova"
                },
                "properties": {
                    strength: "1",
                    defense: "10",
                    speed: "1"
                },
                "actions": ["defense", "move", "dismantle"]
            }


### POST

Update requested object prototype

 + Request (application/json)

    + Headers

            x-auth: {access_token}
            Location: /objects/prototypes/5666b8259297ffe7c16c6785

    + Body

            {
                "name" : "Veza",
                "type" : "building",
                "subtype": "",
                "design": {
                    type: "model",
                    data: "12,3453,654,234,...",
                },
                "content": {
                    type: "markdown",
                    data: "Veza je obranna budova"
                },
                "properties": {
                    strength: "1",
                    defense: "10",
                    speed: "1"
                },
                "actions": ["defense", "move", "dismantle"]
            }
 + Response 200 (application/json)

    + Headers

            Location: /objects/prototypes/5666b8259297ffe7c16c6785

    + Body

                {
                    "status": "ok",
                    "prototypeId": "5666b8259297ffe7c16c6456"
                }

### DELETE

Delete requested object prototype. The object prototype will be moved to objectsPrototypeHistory.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /objects/prototypes/5666b8259297ffe7c16c6785

    + Body

                {
                    "status": "deleted",
                    "prototypeId": "5666b8259297ffe7c16c6456",
                    "prototypeHistoryId": "56af958fbb2d04ed141a24a7"
                }



# Group Stories

## stories [/stories{?owner,limit,date,locale,latest,name}]

### GET

Retrieve the stories. If you need to search stories by x,y coordinates, please use GET /objects endpoint. All of parameters are optional, each of them has default value
The example URL is not displayed correctly by APIARY and should look like this:
/stories?owner[]=5666b8259297ffe7c16c4697&limit=45&date[]=12-05-2016&locale[]=cs&latest=true&name=Veza

+ Request (application/json)

    + Headers

            Location: /stories

+ Parameters

   + owner: `5666b8259297ffe7c16c4696`, `5666b8259297ffe7c16c4697`, `5666b8259297ffe7c16c4698` (optional, array) - List of owner IDs, whos stories will be returned. Default is returning stories of all owners.
   + limit: `45` (optional, number) - The limit of returning stories. Default 500. Accepted values from 1 to 500.
   + date: `12-05-2016` (optional, array) - array of update dates in dd-mm-yyyy format which stories should be returned. If no date is specified, stories of all dates are returned.
   + locale: `cs` (optional, array) - List of locales to return. Default is all object locales.
   + latest: `true` (optional, boolean) - the stories returned are ordered as they are stored = oldest first (default). Set this parameter to return them ordered from latest.
   + name: `Veza` (optional, string) - return only stories that start with this. If not set, API returns all names.


+ Response 200 (application/json)

    + Headers

            Location: /stories

    + Attributes
        + status: ok
        + objects (array[fullStory])

### POST

TODO: Not implemented yet.

You may create new stories using this action. It takes a JSON object in body.
To create a new story, the client have to send:
- the x and y coordinates where the new object will be built
- name of story

Everything else of new object will be calculated based on user and story prototype.

+ Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "x": "12.435",
                "y": "43.123",
                "name": "Pribeh o mne",
                "locale": "en",
                "content": {
                    "type": "markdown",
                    "data": "Kde bolo tam bolo"
                }
            }



+ Response 201 (application/json)

    + Headers

            Location: /stories

    + Body

            {
                "status": "ok",
                "objectId": "asd123454hg4536yhsd4"
            }


## /stories/{object_id}

### GET

TODO: not implemented yet

Get the details of the story by its Id.

 + Parameters
    + object_id: `5666b8259297ffe7c16c1212` - The unique ID of the story object.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)
    + Attributes
        + status: ok
        + object (fullStory)


### POST

TODO: not implemented yet

This method should update the story object. Users don't have to call action to update the object, instead they can update story directly.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Attributes
        + object (newStory)



 + Response 201 (application/json)

    + Headers

            Location: /stories/5666b8259297ffe7c16c6456

    + Body

            {
                "status": "ok",
                "objectId": "5666b8259297ffe7c16c6456"
            }



### DELETE

TODO: Not implemented yet

This method deletes story object.

+ Request (application/json)

    + Headers

            x-auth: {access_token}

+ Response 200 (application/json)

    + Headers

            Location: /stories/5666b8259297ffe7c16c6785

    + Body

                {
                    "status": "ok",
                    "objectId": "5666b8259297ffe7c16c6456",
                    "version": "2"
                }




# Group Actions

## /actions/build

### POST

Request will build the given prototype on the selected x,y coordinates on map. The api will perform credit check to find out if the user has enough resources,
recalculate the price and deduct funds. In case of problem 400 code error message will be returned. In case of success the new object will be returned.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "prototypeId": "asd123454hg4536yhsd4",
                "x": "12.435",
                "y": "43.123"
            }

 + Response 201 (application/hal+json)

    + Headers

            Location: /actions/build

    + Attributes
        + status: ok
        + object (fullObject)

## /actions/mine

### POST

Call when mining resources (active ability)

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Attributes
        + objectId: ssakjhg32hj4ghjkg23k423fd23


 + Response 200 (application/json)

    + Headers

            Location: /actions/mine

    + Body

            {
                "status": "ok"
            }

## /actions/attack

### POST

Call when attacking (active ability)

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "action": "attack"
            }



 + Response 200 (application/json)

    + Headers

            Location: /actions/attack

    + Body

            {
                "status": "ok"
            }


## /actions/repair

### POST

Call when repairing object (active ability)

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "action": "repair"
            }



 + Response 200 (application/json)

    + Headers

            Location: /actions/repair

    + Body

            {
                "status": "ok"
            }


## /actions/move

### POST

Call when moving object from one place to another place (active ability)

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "action": "move"
            }



 + Response 200 (application/json)

    + Headers

            Location: /actions/move

    + Body

            {
                "status": "ok"
            }


# Group Users

## /users

### GET

Get all users

 + Response 200 (application/json)

    + Headers

            Location: /users
            x-auth: {access_token}
    + Body

            [{
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "start_time": "1444345632",
                "profile" {
                    "username": "Janko11",
                    "name": "Jano",
                    "surname": "Mrkvicka",
                    "birthday": "11.11.1911",
                    "description": "Som Janko a mam rad mrkvicku",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                    "email": "jano@mrkvicka.cz"
                },
                "contacts": ["Dzanko12"],
                "user_roles": ["player"],
                "language": "cs"
            },{
                "_id" : ObjectId("5666b8259297ffe7c16c5784"),
                "version" : "3",
                "start_time": "13443423465",
                "profile" {
                    "username": "Dzanko12",
                    "name": "Janko",
                    "surname": "Janik",
                    "birthday": "12.12.1912",
                    "description": "Som Janik a mam rad hrusku",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/janik.jpg",
                    "email": "janik@hruska.cz"
                },
                "contacts": ["Janko11"],
                "user_roles": ["player"],
                "language": "cs"
            }]


### POST

Register a new user.

+ Request (application/json)

    + Headers

            Location: /users

    + Body

            {
                "profile" {
                    "username": "Janko11",
                    "name": "Jano",
                    "surname": "Mrkvicka",
                    "birthday": "11.11.1911",
                    "description": "Som Janko a mam rad mrkvicku",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                    "email": "jano@mrkvicka.cz"
                },
                "login_methods": {
                    "password": "$2a$10$vbnPNKPvd1y6mhp44dKjxuTftdZ1bMn/e8F4Vsl9w1d4JJZ7oLM3y"
                    }
                },
                "contacts": [],
                "language" : "cs"
            }



+ Response 201 (application/json)

    + Headers

            Location: /users

    + Body

            {
                "status": "ok",
                "userId": "5666b8259297ffe7c16c6456"
            }


## /users/{user_id}

### GET

Get requested user

 + Parameters
    + user_id (number) - ID of user

 + Request (application/json)

    + Headers

            Location: /users/5666b8259297ffe7c16c6785

 + Response 200 (application/json)

    + Headers

            Location: /users/5666b8259297ffe7c16c6785

    + Body

            {
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "profile" {
                    "name": "Janko",
                    "real_name": "Jano Mrkvicka",
                    "birth_date": "11.11.1911",
                    "description": "Som Janko a mam rad mrkvicku",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                    "email": "jano@mrkvicka.cz"
                },
            }


### POST

Update requested user

 + Parameters
    + user_id (number) - ID of user

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "profile" {
                    "name": "Janko",
                    "real_name": "Jano Mrkvicka",
                    "birth_date": "11.11.1911",
                    "description": "Som Janko a mam rad mrkvicku",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                    "email": "jano@mrkvicka.cz"
                },
                "login_methods": {
                    "password": {
                        "type": "bcrypt",
                        "data": "$2a$10$vbnPNKPvd1y6mhp44dKjxuTftdZ1bMn/e8F4Vsl9w1d4JJZ7oLM3y"
                    }
                },
                "contacts": [ "user_id1", "user_id2", "user_id3" ]
                "language" : "cs"
            }



 + Response 200 (application/json)

    + Headers

            Location: /objects/5666b8259297ffe7c16c6456

    + Body

            {
                "status": "ok",
                "objectId": "5666b8259297ffe7c16c6456"
            }

### DELETE

Delete requested user. Moves user to UsersHistory collection.
TODO: find out who can delete users.(admin + owner?)

 + Parameters
    + user_id (number) - ID of user

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 204 (application/json)

     + Headers

            Location: /users/5666b8259297ffe7c16c6785


# Group Resources

This is where user's resources are stored. It is like bank account, but with 4 currencies (clay, wood, stone, iron). People
can get only their own resources and also manipulate with own resource.
Therefore there are only 2 endpoints: GET and POST. Both requests will need a valid x-auth token.

## /resources

### GET

Use to get the resources of user. User is recognised from token.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /resources

    + Body

            {
                "status": "ok",
                "balance_at": "2016-03-30T17:10:40Z"
                "resources":
                {
                    "wood": 1000,
                    "stone": 1000,
                    "clay": 1000,
                    "iron": 1000
                }
            }

### POST

Used to manipulate resources. This is not implemented yet. All manipulations with resources will happen inside API based
on action performed.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "clay": "1234"
            }



 + Response 200 (application/json)

    + Headers

            Location: /resources

    + Body

            {
                "status" : "ok"
            }


# Group Authentication

## /auth

### GET

This is used to check the status of token. User will send this GET request with own token in header. The api will check the validity and will return status about validity.
There is one possible values for status: ok. Otherwise error '401 Unauthorized' is returned.

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /auth

    + Body

            {
                "status" : "ok"
            }

### POST

Create new token. When user wants to get token from API, he must send A) correct username and password
Provider can be one of values: towns, facebook, google, twitter. If provider is not present, it will defaults to towns.
Username and password are required in all cases. Request will fail without username and password.

These are not implemented in this stage:
B) correct FB token, then our API will create token and send it back to user.

 + Request (application/json)

    + Headers

    + Body

            {
                "username" : "mrkvicka",
                "password" : "heslo12345"
            }



 + Response 201 (application/json)

    + Headers

            Location: /auth

    + Body

            {
                "x-auth" : "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIn0.xyrhj0YRax4aylMdElRXqHh2vIltDIi22-kCgDvZsxU"
            }

### DELETE

Delete token. The user logged out, so delete his token in API (invalidate or remove)

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 204 (application/json)




# Group User Groups


## /user-groups

### GET
Get all groups

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /user-groups

    + Body

            [{
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "profile" {
                    "name": "Skupina",
                    "real_name": "Machri",
                    "description": "My sme ti, Pa a Pi z macacej planety",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/machri.jpg",
                },
                "admins" : [
                    {
                        "name": "Janko",
                        "real_name": "Jano Mrkvicka",
                        "birth_date": "11.11.1911",
                        "description": "Som Janko a mam rad mrkvicku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                        "email": "jano@mrkvicka.cz"
                    }, {
                        "name": "Janik",
                        "real_name": "Janik Hruska",
                        "birth_date": "12.12.1912",
                        "description": "Som Janko a mam rad hrusku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janik.jpg",
                        "email": "janik@hruska.cz"
                    }
                ],
                "applicants" : [ "name1", "name2" ],
                "members" : [ "Janko", "Janik" ]
            }]

### POST

Create new User Group. The owner will become admin and also first member.

+ Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "profile" {
                    "name": "Skupina",
                    "real_name": "Machri",
                    "description": "My sme ti, Pa a Pi z macacej planety",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/machri.jpg",
                },

            }



+ Response 201 (application/json)

    + Headers

            Location: /user-groups

    + Body

            {
                "status": "ok",
                "objectId": "5666b8259297ffe7c16c6456"
            }




## /user-groups/{group_id}

### GET

Get details of given group


 + Parameters
    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /user-groups/5666b8259297ffe7c16c6785

    + Body

            {
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "profile" {
                    "name": "Skupina",
                    "real_name": "Machri",
                    "description": "My sme ti, Pa a Pi z macacej planety",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/machri.jpg",
                },
                "admins" : [
                    {
                        "name": "Janko",
                        "real_name": "Jano Mrkvicka",
                        "birth_date": "11.11.1911",
                        "description": "Som Janko a mam rad mrkvicku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                        "email": "jano@mrkvicka.cz"
                    }, {
                        "name": "Janik",
                        "real_name": "Janik Hruska",
                        "birth_date": "12.12.1912",
                        "description": "Som Janko a mam rad hrusku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janik.jpg",
                        "email": "janik@hruska.cz"
                    }
                ],
                "applicants" : [ "name1", "name2" ],
                "members" : [ "Janko", "Janik" ]
            }


### POST
Update given group

 + Parameters
    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "_id" : ObjectId("5666b8259297ffe7c16c6785"),
                "version" : "1",
                "profile" {
                    "name": "Skupina",
                    "real_name": "Machri",
                    "description": "My sme ti, Pa a Pi z macacej planety",
                    "signature": "Dzanko12",
                    "image": "cdn.towns.cz/users/profileimages/machri.jpg",
                },
                "admins" : [
                    {
                        "name": "Janko",
                        "real_name": "Jano Mrkvicka",
                        "birth_date": "11.11.1911",
                        "description": "Som Janko a mam rad mrkvicku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janko.jpg",
                        "email": "jano@mrkvicka.cz"
                    }, {
                        "name": "Janik",
                        "real_name": "Janik Hruska",
                        "birth_date": "12.12.1912",
                        "description": "Som Janko a mam rad hrusku",
                        "signature": "Dzanko12",
                        "image": "cdn.towns.cz/users/profileimages/janik.jpg",
                        "email": "janik@hruska.cz"
                    }
                ],
                "applicants" : [ "name1", "name2" ],
                "members" : [ "Janko", "Janik" ]
            }



 + Response 200 (application/json)

    + Headers

            Location: /user-groups/5666b8259297ffe7c16c6456

    + Body

            {
                "status": "ok",
                "objectId": "5666b8259297ffe7c16c6456"
            }

### DELETE
Delete given User Group


 + Parameters

    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 204 (application/json)

     + Headers

            Location: /user-groups/5666b8259297ffe7c16c6785


## /user-groups/membership/{group_id}

### GET

Get membership status of current user

- no status
- applied for membership
- member
- admin
- banned

New statuses may be added later.

 + Parameters
    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /user-groups/membership/5666b8259297ffe7c16c6785

    + Body

            {
                "status" : "member",
            }


### POST

Update membership status. Currently only 'apply' request, but this may be extended in future.

 + Parameters
    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "action" : "apply"
            }

 + Response 200 (application/json)

    + Headers

            Location: /user-groups/membership/{group_id}

    + Body

            {
                "status" : "ok",
                "message" : "Application accepted"
            }

### DELETE
Leave given User group

 + Parameters

    + group_id (number) - ID of group

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 204 (application/json)

     + Headers

            Location: /user-groups/membership/{group_id}



# Group Chats

## /chats

### GET
Get all chat messages

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /chats

    + Body

            [
                {
                    "_id" : ObjectId("507f1f77bcf86cd799439011"),
                    "from" : "pepa",
                    "to": "Janko",
                    "body": "Ahoj, ako sa mas?",
                    "created_at" : "1300056700"
                },{
                    "_id" : ObjectId("507f1f77bcf86cd799439012"),
                    "from" : "Janko",
                    "to": "pepa",
                    "body": "Mam sa fajn. A ty?",
                    "created_at" : "1300056800"
                },{
                    "_id" : ObjectId("507f1f77bcf86cd799439013"),
                    "from" : "pepa",
                    "to": "Janko",
                    "body": "Ja tiez",
                    "created_at" : "1300056900"
                }
            ]

### POST
Send new chat message

+ Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "to": "pepa",
                "body": "Co ideme dnes robit?",

            }

+ Response 200 (application/json)

    + Headers

            Location: /chats

    + Body

            {
              "status" : "ok",
              "message" : "message sent"
            }


# Group Permalinks

## /permalinks

### GET

Get the list of permalinks

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /permalinks

    + Body

            [
                {
                    "_id" : "507f1f77bcf86cd799439011",
                    "uri" : "pribeh-o-cervene-karkulce",
                    "reference": "5126bc054aed4daf9e2ab772"
                },{
                    "_id" : "507f1f77bcf86cd799439012",
                    "uri" : "pribeh-o-modrom-koniku",
                    "reference": "5126bc054aed4daf9e2ab772"
                },{
                    "_id" : "507f1f77bcf86cd799439013",
                    "uri" : "pribeh-o-zltom-trpaslikovi",
                    "reference": "5126bc054aed4daf9e2ab772"
                }
            ]

### POST

Create new permalink. On success it will return status and id of new permalink

+ Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "uri": "pribeh-o-mne",
                "object": {
                    "name" : "Pribeh O Mne",
                    "type" : "story",
                    "subtype": "",
                    "x": "12.10",
                    "y": "-55.55",
                    "locale": "cs",
                    "content": {
                        type: "markdown",
                        data: "Zacalo to kedysi davno ..."
                    }
                }

            }

+ Response 200 (application/json)

    + Headers

            Location: /permalinks

    + Body

            {
              "status" : "ok",
              "_id" : "507f1f77bcf86cd799439011"
            }

## /permalinks/{permalink_id}

### GET
Get details of requested permalink
 + Parameters

    + permalink_id (string) - id of permalink resource

 + Request (application/json)

    + Headers

            x-auth: {access_token}

 + Response 200 (application/json)

    + Headers

            Location: /permalinks/{permalink_id}

    + Body

            {
                "_id" : "507f1f77bcf86cd799439011",
                "uri" : "pribeh-o-cervene-karkulce",
                "object": {
                    "_id" : "5666b8259297ffe7c16c1212",
                    "version": "1",
                    "name" : "Pribeh o cervenej karkulce",
                    "type" : "story",
                    "subtype": "",
                    "x": "12.10",
                    "y": "-55.55",
                    "start_time": "1449572794",
                    "stop_time": "",
                    "locale": "cs",
                    "design": {
                        type: "model",
                        data: "12,3453,654,234,...",
                    },
                    "content": {
                        type: "markdown",
                        data: "Kde bolo tam bolo ..."
                    },
                    "properties": {
                        strength: "0",
                        defense: "0",
                        speed: "0"
                    },
                    "actions": ["dismantle", "attack_imunity"],
                    "owner" : {
                        "$ref" : "Users",
                        "$id" : ObjectId("5126bc054aed4daf9e2ab772")
                    }
                }
            }

### POST
Update permalink resource

 + Parameters
    + permalink_id (string) - id of permalink resource

 + Request (application/json)

    + Headers

            x-auth: {access_token}

    + Body

            {
                "_id" : "507f1f77bcf86cd799439011",
                "uri" : "pribeh-o-cervene-karkulce",
                "object": {
                    "_id" : "5666b8259297ffe7c16c1212",
                    "version": "1",
                    "name" : "Pribeh o cervenej karkulce",
                    "type" : "story",
                    "subtype": "",
                    "x": "12.10",
                    "y": "-55.55",
                    "start_time": "1449572794",
                    "stop_time": "",
                    "locale": "cs",
                    "design": {
                        type: "model",
                        data: "12,3453,654,234,...",
                    },
                    "content": {
                        type: "markdown",
                        data: "Kde bolo tam bolo ..."
                    },
                    "properties": {
                        strength: "0",
                        defense: "0",
                        speed: "0"
                    },
                    "actions": ["dismantle", "attack_imunity"],
                    "owner" : {
                        "$ref" : "Users",
                        "$id" : ObjectId("5126bc054aed4daf9e2ab772")
                    }
                }
            }

 + Response 200 (application/json)

    + Headers

            Location: /permalinks/{permalink_id}

    + Body

            {
                "status" : "ok",
                "message" : "Permalink updated"
            }


### DELETE
Delete the permalink resource

 + Parameters
    + id (string) - id of permalink resource

 + Request (application/json)

    + Headers

            x-auth: {access_token}


 + Response 204 (application/json)




# Data Structures

## createObject (object)

- name: `Veza` (string, required) - The name of the object.
- type (enum[string])
    - building - The building type object.
    - terrain - The terrain type of object.
    - story - The Story object.
- subtype: `` (string)
- x: `12.10` (number, required)
- y: `-55.55` (number, required)
- locale: `cs` (string)
- design: {} (object, required)
    - type: `model` (string)
    - data: `12,3453,654,234,...` (string)
- content: {} (object, required)
    - type: `markdown` (string)
    - data: `Veza je obranna budova`
- properties: {} (object)
    - strength: `1` (number)
    - defense: `10` (number)
    - speed: `1` (number)
- actions: `defense`, `dismantle` (array, required)

## fullObject (object)

- _id: `5666b8259297ffe7c16c1212` (string, required) - The unique ID of the object.
- version: `0` (number, required) - The version of the object.
- Include createObject
- start_time: `2016-02-23T17:24:24.872Z` (string, required) - ISO8601 date and time of when the object was created.
- owner: `5126bc054aed4daf9e2ab772` (string, required)

## newStory (object)

- name: `Pribeh o mne` (string, required) - The name of the story.
- type `story` (string) - The only story type for Story.
- subtype: `` (string)
- x: `12.10` (number, required)
- y: `-55.55` (number, required)
- locale: `cs` (string)
- design: {} (object)
    - type: `model` (string)
    - data: `12,3453,654,234,...` (string)
- content: {} (object, required)
    - type: `markdown` (string)
    - data: `Toto je pribeh o mne`
- properties: {} (object)
- actions: `defense`, `dismantle` (array)

## fullStory (object)

- _id: `5666b8259297ffe7c16c1212` (string, required) - The unique ID of the story.
- version: `0` (number, required) - The version of the story.
- Include newStory
- start_time: `2016-02-23T17:24:24.872Z` (string, required) - ISO8601 date and time of when the story version was created.
- owner: `5126bc054aed4daf9e2ab772` (string, required)

